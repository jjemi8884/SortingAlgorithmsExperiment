BubbleSort
Random ,0.8, 0.901, 3.2, 11.6, 49.9, 190.299, 728.901, 1253.7, 2113.901, 7710.7, 12918.2, 63948.499, 303582.1, 1304568.5, 
50% Sorted ,0.6, 0.3, 0.6, 1.9, 5.201, 15.6, 46.3, 176.6, 556.7, 1970.1, 8276.099, 42264.7, 220622.4, 1008823.799, 
75% Sorted ,0.6, 0.1, 0.4, 1.2, 3.2, 9.9, 29.1, 105.8, 348.6, 1193.8, 4441.601, 20901.1, 116434.401, 620784.099, 
Full Sorted ,0.6, 0.1, 0.2, 0.5, 1.4, 4.699, 14.001, 49.399, 189.3, 713.7, 2977.299, 11646.299, 45991.9, 187061.899, 
Sorted in Reverse ,0.6, 0.2, 0.3, 0.7, 2.0, 8.0, 33.0, 143.5, 572.5, 2185.2, 8763.1, 35014.201, 141997.801, 568874.9, 
BucketSort
Random ,2.6, 10.0, 9.399, 12.501, 21.6, 45.1, 94.4, 198.3, 300.5, 354.3, 526.399, 1009.1, 2063.0, 3285.5, 
50% Sorted ,3.101, 1.7, 2.5, 4.0, 7.7, 14.6, 51.1, 28.6, 42.0, 71.599, 132.201, 259.0, 548.301, 1124.701, 
75% Sorted ,1.2, 0.7, 0.8, 1.3, 2.1, 3.699, 13.001, 14.4, 43.4, 61.8, 121.6, 253.5, 555.499, 961.499, 
Full Sorted ,0.8, 0.6, 0.8, 1.299, 16.3, 3.499, 7.001, 13.6, 26.7, 54.1, 156.299, 267.801, 534.7, 777.099, 
Sorted in Reverse ,1.4, 0.5, 0.8, 1.099, 1.8, 2.901, 5.7, 11.4, 22.299, 49.401, 98.6, 170.499, 357.601, 750.6, 
Counting
Random ,0.7, 0.601, 0.9, 1.3, 2.5, 4.5, 8.5, 25.999, 35.7, 70.4, 139.5, 286.4, 567.2, 1147.899, 
50% Sorted ,1.3, 0.8, 1.1, 1.7, 3.001, 5.5, 11.5, 37.099, 41.801, 41.8, 52.699, 82.2, 120.6, 237.101, 
75% Sorted ,0.8, 0.3, 0.5, 0.4, 0.7, 1.1, 2.0, 3.599, 7.201, 14.0, 36.899, 56.401, 111.201, 232.6, 
Full Sorted ,0.9, 0.5, 0.5, 0.8, 1.1, 2.1, 3.201, 5.5, 7.3, 14.2, 35.2, 56.9, 120.1, 221.699, 
Sorted in Reverse ,0.4, 0.3, 0.4, 0.5, 0.7, 1.099, 2.0, 3.701, 7.1, 14.6, 34.101, 56.599, 111.101, 234.399, 
HeapSort
Random ,1.0, 1.8, 5.199, 13.199, 31.0, 56.701, 136.5, 125.299, 144.801, 310.3, 763.601, 1190.101, 2025.6, 4383.3, 
50% Sorted ,1.2, 0.8, 1.3, 2.701, 5.4, 11.3, 22.8, 68.0, 98.3, 169.599, 335.2, 698.401, 1468.0, 3151.6, 
75% Sorted ,15.2, 0.6, 0.8, 1.7, 3.6, 7.299, 15.6, 32.801, 69.9, 137.6, 275.3, 634.901, 1232.8, 2504.1, 
Full Sorted ,0.401, 24.3, 0.6, 1.099, 2.401, 5.1, 11.401, 24.1, 50.7, 105.3, 267.599, 517.699, 948.7, 2210.3, 
Sorted in Reverse ,23.401, 14.0, 15.3, 2.5, 4.799, 9.901, 20.499, 42.9, 67.401, 135.3, 252.1, 452.901, 918.1, 1886.7, 
InsertionSort
Random ,0.9, 1.0, 1.9, 5.499, 23.0, 77.1, 300.199, 890.8, 893.2, 3179.5, 6492.2, 19575.6, 20907.0, 96241.1, 
50% Sorted ,1.0, 0.1, 0.3, 0.5, 0.8, 1.8, 5.501, 15.999, 57.9, 231.1, 922.7, 3888.099, 15904.901, 67369.401, 
75% Sorted ,2.0, 0.2, 0.2, 0.3, 0.8, 1.6, 3.799, 13.299, 53.3, 151.6, 593.201, 2403.501, 9401.399, 38656.9, 
Loading history...


Max Cifuentes
:headphones:  1:03 PM
We can just go with a traditional document then, it really wouldn't be too hard since it's only my slides.
If you guys want to drop your emails, I can share a Word document for us to work on


Justin M Jemison
:headphones:  1:04 PM
can yo udo a good doc?
1:05
Word Document


Analysis project 1.docx
Word Document
1:05
Or you can just use Slack to download the Document
1:05
An add to it


Jackson Kettel
:headphones:  1:06 PM
Also


Justin M Jemison
:headphones:  1:06 PM
okay going to stop updating the slide deck


Jackson Kettel
:headphones:  1:07 PM
I was looking at the graphs, when you say the x-axis is the different tests, and not the different size of the arrays, it looks like x axis is when the array increases in size, at least the data matches


Justin M Jemison
:headphones:  1:07 PM
yea the x axis is the 2^n
1:07
the different test are all in different graphs
1:07
y access is the time


Jackson Kettel
:headphones:  1:08 PM
ok, that's what I thought, so we don't need to fix that, correct?


Justin M Jemison
:headphones:  1:08 PM
no I would not
1:09
Excel is not as liberal in allows graphs to be labels as I would like.


Jackson Kettel
:headphones:  1:09 PM
Ok, we should clarify in our report what the axis represent since they don't have the axis labels on them


Justin M Jemison
:headphones:  1:10 PM
Yea that would be good
1:10
In my reptort I did removed a couple of the first test since they skewed the data a bit
1:11
If you notice all the first and second test have very high numbers compaired to the rest of the test. not sure why
1:11
but I explained that in my results


Max Cifuentes
:headphones:  1:12 PM
https://docs.google.com/document/d/1bK6YSNOedtQd1Ul-oo4KoqdH1TT1NJP7mfbVYB0Ayag/edit?usp=sharing
1:14
That can be the Google Doc, unless we wanted to download Justin's Word document and add to it individually. I didn't see an easy way to collaborate on it all together though which would suck having to combine them all together in the end


Jackson Kettel
:headphones:  1:20 PM
how did you add the best fit line for your graphs Justin


Justin M Jemison
:headphones:  1:21 PM
Click on a chart and then hit the chart design tab
1:22
ther the far left three is the option to add chart element
1:22
just add a trend line
1:22
dam I guess you can add axsis there also
1:22
lol


Jackson Kettel
:headphones:  1:23 PM
Ok, and if our sorting algo has a O(n^2) , should we add the exponential line instead of the linear one?


Justin M Jemison
:headphones:  1:23 PM
depends on what you want to display
1:24
Like I had a n^2 and it was more linear than expo


Max Cifuentes
:headphones:  1:24 PM
Does anyone know how to add just a folder to our GitHub repo? I don't know if you guys had seen we individually had to screenshot "proof" from terminal that we did push and pulls to the repo


Justin M Jemison
:headphones:  1:24 PM
okay
1:26
okay done in the good docs
1:26
I will create the new folder and push it up


Jackson Kettel
:headphones:  1:26 PM
go to your local repo, add a folder called "Git screenshots", then in the command line, do this
git add file_path_to_new_folder_from_main_repo


Justin M Jemison
:headphones:  1:26 PM
fo the screen shots of our push and pulls in CMD


Jackson Kettel
:headphones:  1:27 PM
then just commit and push it and that should work
1:28
also, is the y axis micro or milliseconds?


Justin M Jemison
:headphones:  1:28 PM
its what we send over so micro seconds i though
1:29
sorry milli
1:29
not micro


Justin M Jemison
:headphones:  1:48 PM
okay ifyou do a pull request, you will have the folder to put your screen shots in
1:48
I when ahead an merged it since there was really nothing to qa:
1:48
except my failing at CMD line lol
1:51
if you do a pull/merge it should be here


Justin M Jemison
:headphones:  1:58 PM
O man I suck its in micro seconds
1:58
Way to much going on right now


Jackson Kettel
:headphones:  2:07 PM
Quick question, I noticed that the time on the graphs increases a lot for when the array is sorted vs unsorted, and I don't think this should be the case with bubble sort, which takes roughly the same time regardless of whether the array is sorted or not. Is there something off with our testing?
2:08
Same applys for many of the other sorts as well


Justin M Jemison
:headphones:  2:08 PM
Yea I don't know. I would note it
2:09
The counting was pretty consistent which is expected


Jackson Kettel
:headphones:  2:09 PM
I'm going to look into the time measuring and check to see if there is a error that is causing the time to increase so much


Justin M Jemison
:headphones:  2:10 PM
okay
2:10
But don't change to much or you through our analysis out of wack


Max Cifuentes
:headphones:  2:10 PM
Agreed, I would make a note of it. It's odd but my quick sort first element looks about right, and selection/insertion look approximately right as well. It seems odd but we could mention it in our final report as well- I think bugs like these experimental errors are common if this really is an experiment/project we're doing


Jackson Kettel
:headphones:  2:11 PM
Yeah, but I think it actually makes the results wrong, so we might need to change some things


Justin M Jemison
:headphones:  2:11 PM
I did change a couple of setting of setting in my sort to see the change
2:11
But I would not change the actual test
2:14
The timing seemed right to me


Jackson Kettel
:headphones:  2:16 PM
For the bubble sort method (as an example), it's best case and worst case should be the same if the array is the same size, so the fact that the random sorted array only took 2.5 microseconds max, and the sorted took 8000 microseconds does not seem right


Justin M Jemison
:headphones:  2:19 PM
Lol just ran it again and it does not like the sores ld stuff
2:19
Excel Spreadsheet


Graph.xlsx
Excel Spreadsheet
2:19
got it up to 14k lol
2:20
or 12 k


Jackson Kettel
:headphones:  2:20 PM
im debugging right now to find the issue


Justin M Jemison
:headphones:  2:20 PM
I would like at the sort not the test


Jackson Kettel
:headphones:  2:20 PM
It seems that the issue is the test and not the sort
2:21
since the sorting algorithms seem to be sorting fine on the random arrays


Justin M Jemison
:headphones:  2:21 PM
Yea but all other test are sorting right
2:21
Or all sorts are sorting right
2:22
If you looks at the count it is consistent
2:23
aaa its getting worse LOL
2:23
Excel Spreadsheet


Graph.xlsx
Excel Spreadsheet
2:25
image.png

image.png
2:25
not sure what we could do different
2:26
or how the test would change when we have more items to sort


Jackson Kettel
:headphones:  2:28 PM
I think I might see an issue


Justin M Jemison
:headphones:  2:29 PM
ooooo
2:29
please share in slack


Jackson Kettel
:headphones:  2:36 PM
When I am adding the test results by calling testResultMatrix.addResults(name, (int)timeElapsed), I think there is an error on how SortingClassNode is organizing the results, because when I am debugging each time a test result is taken, its recording all of the 2 ^ n first (one for random, 50 % sorted, 75 % sorted, full sorted, and reverse sorted), then moving to the next 2 ^n size.
2:37
When looking at bubble sort when debugging this, the results for each array size (2 ^n) are roughly the same between each different type of sorted array


Justin M Jemison
:headphones:  2:38 PM
wait is that how the test go?


Jackson Kettel
:headphones:  2:38 PM
When I iterated through the test arrays given by TestGenerator, that is the order they come in


Justin M Jemison
:headphones:  2:39 PM
so it would do the n^2 test for all arrays then move on to n ^3


Jackson Kettel
:headphones:  2:39 PM
yep


Justin M Jemison
:headphones:  2:40 PM
well yea I was under the impression that it would do all the random first then sorted .....


Jackson Kettel
:headphones:  2:40 PM
This is something we need to change unfortunatly, because are results are very off if we keep it the same way


Justin M Jemison
:headphones:  2:40 PM
yes
2:40
it would be easier to change in the generator


Jackson Kettel
:headphones:  2:41 PM
It's a pretty easy fix, basically when TestImplementer asks TestGenerator for the arrays, just change the orders that the arrays are given such that it goes all random arrays first, then 50 percent arrays, and so on


Justin M Jemison
:headphones:  2:44 PM
Max can you change?
2:45
if not then trying to change it in the getter would be pretty difficult


Max Cifuentes
:headphones:  2:45 PM
I can make the change if you guys would like- that's my bad that was my understanding of how we would do it and i made that note in the design thing that I had sent out on Friday/Saturday that that was how I was going to code it.
I had made it that way since all of the arrangements that are the same size integers, need to have the same contents just in a different order which is why I had it like that since it would be easiest that way but having a different way with the same integers shouldn't be too difficult


Justin M Jemison
:headphones:  2:45 PM
Yea if you can
2:46
If we changed the sorting class it cause the excel to be messed up too
2:46
Also i would need to augment the printer method to have to save each line for each test then print them out


Jackson Kettel
:headphones:  2:46 PM
I think how you implemented is correct for the design, its just downstream it was not implemented like that. But making changes downstream at this point would take too long, so it is much easier to make that change upstream. Glad we caught this, would have been bad.


Justin M Jemison
:headphones:  2:48 PM
downstream would be hard to test due to each test result not being grouped togethere
2:48
each test would be 5 elements off


Max Cifuentes
:headphones:  2:48 PM
At this point, I think I may stay home from class just to be able to finish up the final report as well but I'll work on the changes to the code  ASAP.
Just to confirm: all random arrays of varying size would come first, then all 50% of varying size, etc...


Justin M Jemison
:headphones:  2:48 PM
yea, so I have random, 50%, 75%, sorted, reversed


Jackson Kettel
:headphones:  2:49 PM
yes, and it should start with the smallest array first and go to the largest, then move to the next type of array and do the same


Justin M Jemison
:headphones:  2:50 PM
yea that is how i have it streamed out
2:51
to the output takes the 14 consecutive points at a time to groups together as a test


Jackson Kettel
:headphones:  2:52 PM
image.png

image.png
2:53
Basically with this method, instead of one for loop, I think you want to make 5 for loops that loop through each type of array 14 times


Justin M Jemison
:headphones:  2:53 PM
so that create the arrays, how about the call to the arrays


Jackson Kettel
:headphones:  2:59 PM
call to the arrays?


Justin M Jemison
:headphones:  3:00 PM
nm its the get cloned array
3:00
yea i agree we would need to adjust that method in how its put into the testarray


Max Cifuentes
:headphones:  3:02 PM
Do you guys know of an easy way to keep the same integers across the same sized arrays? Or should we kinda just say f it at this point and make the integers different because that implementation is easy off the top of my head


Jackson Kettel
:headphones:  3:02 PM
create an initial array that stores 14 arrays, and then iterate through that


Justin M Jemison
:headphones:  3:03 PM
yea
3:06
or we can just adjust the current array


Jackson Kettel
:headphones:  3:06 PM
in pseudo-code I think it would look something like this:
power = 2
int[ ][ ] initialArrays = new int[][14]
for (i = 0; i < initialArryas.length; i++)
        CreateArrays arrayCreator = new CreateArrays(2 ^ power)
         power++


Justin M Jemison
:headphones:  3:07 PM
huttle
A huddle happened  3:07 PM
You, Jackson Kettel, and Max Cifuentes were in the huddle for 14m.


Jackson Kettel
:headphones:  3:10 PM
actually wait, instead of making an array of arrays, make an array storing 14 CreateArrays objects


Jackson Kettel
:headphones:  3:28 PM
Ok, and so with the graphs, it shows 1-14, but I think for better looking graphs, we should represent the x axis as 2 ^(1-14), because some of the graphs that should be O(nlogn) look exponential with our current model
3:30
and some of the ones that should be linear (radix) should look linear and not exponential


Jackson Kettel
:headphones:  3:42 PM
can you guys huddle again really quick?
A huddle happened  3:42 PM
You, Jackson Kettel, and Max Cifuentes were in the huddle for 11m.


Jackson Kettel
:headphones:  3:55 PM
the graph visuals don't match yet, but the data values do, so you can start to write your reports based on those values


Justin M Jemison
:headphones:  4:20 PM
out updated the graph to the scatter plot and the the actuall x axsis
:pray:
1
:partying_face:
1



Jackson Kettel
:headphones:  4:21 PM
Awesome! Thanks you for doing that!
4:22
Are you able to push those changes?


Justin M Jemison
:headphones:  4:22 PM
done
:+1:
1

4:22
pushed to main since no QA needed


Max Cifuentes
:headphones:  5:01 PM
I finished the Design Implementation Details section, so that means after our individual analysis of algorithms we just need to write the Overall Algorithm Analysis section:
Compare the performance of all the algorithms in words. Which were fastest for smaller data sets and which for larger? Discuss what sort of tradeoffs each algorithm makes and what algorithms are suited for what type of applications, such as large systems, distributed systems, embedded systems, mobile systems, etc.
5:01
I also added the UML to the main repo, and submitted our project board
5:01
See you all in class soon!


Jackson Kettel
:headphones:  7:04 PM
I think there might be an issue with this piece of code, as it is only creating a copy of the arraylist, but I think all of the arrays within it still have that same place in memory, so when the array gets sorted, and this method gets called for the next sorting algorithm, all of the arrays are already sorted
image.png

image.png


Jackson Kettel
:headphones:  7:17 PM
Fixed it doing this, and some of the sorting algorithms (Counting and Quicksort First) did not work and returned negative values except for the sorted arrays they were passed.
image.png

image.png


Max Cifuentes
:headphones:  7:40 PM
Worse comes to worse with QuickSortFirst, I can change it back to my original implementation that for sure worked, and we'll just mark that we couldn't get it to work with larger numbers like other groups had to


Jackson Kettel
:headphones:  7:55 PM
I messaged Eric and told him our situation, he said submit the link to the repo tonight, and he will give us an additional 24 hours to finish our report.


Max Cifuentes
:headphones:  8:31 PM
Sounds good, I’ll take an hour to try to resolve the issue with my quick sort when I get home using the implementation that could handle the larger arrays. If I can’t figure it out- I’ll use my original implementation and have it only do a sort of the array size is less than 2^15 so it doesn’t break the program. And I’ll make a note of it on my section in the report and code
New


Max Cifuentes
:headphones:  10:03 PM
Quick Sort is fixed
10:03
I just made a pull request
10:05
Also
@Jackson Kettel
 Don't forget to submit your screenshots of the terminal GitHub commands!!! I noticed they're not in there yet and don't want you to miss any points in case you forgot
:+1:
1



Jackson Kettel
:headphones:  10:23 PM
Which git commands are we required to show, I forget where the instructions for that part are?


Max Cifuentes
:headphones:  10:46 PM
Push and pull I believe


Jackson Kettel
:headphones:  11:35 PM
you guys good to hop into a huddle?
You joined the huddleLIVE  11:35 PM
Jackson Kettel and Max Cifuentes are here too.











Message team-sbt









Shift + Enter to add a new line


:headphones:


team-sbtFull Sorted ,0.601, 0.2, 0.1, 2.8, 0.2, 0.2, 0.5, 0.7, 1.3, 2.5, 5.1, 10.201, 19.801, 46.5,
Sorted in Reverse ,0.1, 0.2, 0.4, 0.7, 1.499, 3.801, 11.901, 43.501, 173.801, 644.4, 2602.7, 10518.5, 44078.6, 179333.601, 
MergeSort
Random ,2.7, 4.2, 10.1, 19.1, 45.4, 102.8, 203.099, 304.001, 542.101, 331.6, 694.2, 1441.9, 2387.5, 4469.2, 
50% Sorted ,0.5, 0.5, 2.599, 2.201, 5.3, 12.1, 25.099, 46.4, 108.2, 254.0, 418.201, 887.9, 1833.0, 7150.301, 
75% Sorted ,0.6, 0.5, 1.0, 2.9, 3.501, 9.2, 18.099, 38.901, 73.3, 134.2, 263.2, 676.2, 1309.701, 2478.001, 
Full Sorted ,0.399, 0.5, 1.0, 1.701, 3.3, 7.199, 13.301, 27.4, 60.7, 113.8, 251.3, 485.5, 1182.599, 1471.6, 
Sorted in Reverse ,0.5, 0.4, 0.7, 1.3, 2.3, 4.401, 8.9, 16.899, 38.701, 77.7, 157.699, 316.701, 779.4, 1595.0, 
QuickSortFirst
Random ,0.9, 1.2, 2.1, 4.7, 12.499, 26.301, 70.2, 147.999, 140.0, 201.8, 354.1, 784.401, 1815.0, 7220.0, 
50% Sorted ,0.4, 0.2, 0.4, 0.8, 1.8, 3.8, 8.699, 20.301, 44.0, 99.4, 206.3, 457.2, 967.9, 1920.4, 
75% Sorted ,0.2, 0.2, 0.4, 1.0, 1.5, 3.599, 7.601, 18.5, 46.0, 100.301, 197.1, 462.0, 1102.3, 2054.8, 
Full Sorted ,0.2, 0.1, 0.2, 0.5, 1.6, 5.1, 19.0, 70.499, 276.5, 1116.4, 4458.299, 18270.5, 77138.399, 313043.6, 
Sorted in Reverse ,1.7, 0.3, 0.5, 0.9, 2.801, 9.7, 36.4, 146.999, 555.601, 2211.499, 8244.5, 32121.4, 122296.3, 439972.0, 
QuickSortMo3
Random ,0.7, 0.8, 4.799, 5.701, 11.6, 32.0, 52.5, 109.899, 216.501, 319.9, 407.699, 936.301, 1904.9, 3890.199, 
50% Sorted ,0.5, 0.2, 0.4, 0.8, 1.799, 3.801, 8.3, 17.999, 42.801, 84.3, 182.0, 559.999, 1920.2, 2732.799, 
75% Sorted ,0.5, 0.4, 0.7, 1.2, 2.801, 10.699, 12.201, 25.901, 114.299, 178.1, 488.1, 599.601, 602.2, 1294.101, 
Full Sorted ,0.2, 0.2, 0.2, 0.3, 0.5, 0.9, 1.8, 3.699, 9.101, 19.099, 41.401, 92.6, 216.101, 516.8, 
Sorted in Reverse ,0.2, 0.2, 0.3, 0.5, 1.0, 2.0, 3.6, 8.0, 17.1, 35.2, 75.2, 167.7, 358.601, 902.3, 
QuickSortRandom
Random ,2.3, 3.601, 16.7, 17.0, 41.4, 82.9, 179.5, 293.3, 410.7, 404.1, 568.7, 1291.4, 2701.8, 3392.7, 
50% Sorted ,0.5, 0.4, 0.9, 1.6, 3.5, 7.1, 15.2, 31.2, 71.199, 133.0, 289.301, 612.6, 1207.0, 2601.3, 
75% Sorted ,0.6, 1.4, 0.8, 1.7, 3.2, 6.901, 15.7, 31.2, 74.9, 144.199, 274.2, 557.701, 1220.5, 2447.199, 
Full Sorted ,0.4, 0.4, 0.8, 1.4, 3.199, 8.401, 12.5, 25.5, 85.3, 129.9, 216.1, 462.399, 924.901, 1888.201, 
Sorted in Reverse ,0.5, 0.501, 0.7, 1.7, 4.0, 5.999, 13.5, 32.801, 55.3, 114.6, 233.4, 493.199, 973.199, 2158.1, 
RadixSort
Random ,29.7, 24.3, 28.199, 57.901, 126.201, 195.999, 408.4, 915.001, 1436.2, 1567.6, 3277.599, 3857.1, 10964.599, 29048.6, 
50% Sorted ,15.4, 9.101, 14.5, 26.9, 68.4, 84.6, 100.199, 171.301, 346.199, 643.701, 1259.1, 3088.7, 8398.501, 28118.501, 
75% Sorted ,30.9, 2.9, 18.0, 8.5, 13.6, 28.9, 57.199, 129.301, 233.7, 502.801, 1192.999, 3109.599, 8039.499, 27725.8, 
Full Sorted ,2.601, 2.1, 5.3, 7.4, 13.399, 29.0, 65.301, 118.399, 252.3, 549.4, 1267.4, 3231.9, 8817.499, 26998.2, 
Sorted in Reverse ,3.3, 2.1, 5.999, 7.201, 13.7, 30.4, 58.5, 129.9, 266.9, 560.199, 1290.601, 3168.099, 8424.6, 25314.8, 
SelectionSort
Random ,0.7, 1.0, 2.8, 8.5, 32.6, 127.099, 482.7, 886.4, 1779.9, 2489.5, 10733.7, 16426.1, 65061.0, 246186.101, 
50% Sorted ,0.601, 0.3, 0.6, 1.3, 3.2, 8.901, 24.9, 86.1, 293.0, 999.4, 3837.5, 15421.8, 66645.801, 241964.301, 
75% Sorted ,0.6, 0.3, 0.6, 1.1, 2.9, 8.0, 23.8, 88.5, 263.699, 957.501, 3797.9, 14914.099, 59517.5, 248461.999, 
Full Sorted ,0.5, 0.2, 0.4, 0.6, 1.599, 4.801, 16.5, 66.3, 230.5, 934.0, 3719.6, 15434.001, 61804.2, 236184.4, 
Sorted in Reverse ,0.6, 0.3, 0.5, 1.1, 2.7, 8.0, 28.2, 108.7, 452.5, 1583.699, 6476.6, 28002.4, 154685.399, 850031.099, 
ShellSort
Random ,0.7, 0.8, 1.9, 4.7, 14.1, 34.5, 78.499, 215.4, 558.901, 855.4, 807.8, 1695.4, 2603.899, 6276.499, 
50% Sorted ,0.2, 0.2, 0.2, 0.7, 1.699, 4.201, 9.999, 22.501, 55.099, 131.801, 320.8, 761.601, 2129.701, 4792.699, 
75% Sorted ,0.2, 0.1, 0.3, 0.5, 1.3, 3.099, 7.701, 18.1, 52.0, 100.799, 241.201, 630.499, 1508.099, 3913.3, 
Full Sorted ,0.2, 0.1, 0.2, 0.3, 0.5, 1.0, 2.199, 4.801, 10.799, 23.401, 56.4, 112.3, 263.201, 676.2, 
Sorted in Reverse ,0.2, 0.2, 0.3, 0.6, 1.0, 1.6, 3.299, 7.101, 15.5, 34.1, 89.9, 172.5, 371.3, 817.5, 
